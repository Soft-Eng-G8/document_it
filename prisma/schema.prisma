// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id                String          @id @default(cuid())
  name              String
  users             User[]
  permissions       Permission[]
}

model User {
  id                String          @id @default(cuid())
  name              String          @unique
  username          String          @unique
  email             String?         @unique
  hashedPassword    String
  createdAt         DateTime        @default(now())

  accountId         String?
  account           Account?
  roles             Role[]       

  documents         Document[]

  contributions     Contribution[] @relation("ContributionUser")

  reviews           Contribution[] @relation("ContributionReviewer")

  badges Badge[]
}

model Account {
  id                String          @id @default(cuid())
  provider          String
  providerAccountID String

  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Credential-based
  username          String?
  hashedPassword    String?

  // OAuth-based
  accessToken       String?
  refreshToken      String?
}

model Category {
  id                String          @id @default(cuid())
  title             String
  description       String
  imageUrl          String?
  categories        Category[]      @relation("CategoryToCategory")
  Documents         Document[]
  categoryParent    Category?       @relation("CategoryToCategory", fields: [categoryId], references: [id])
  categoryId        String?

  oldContributions  Contribution[] @relation(name: "oldCategoryToContribution")
  newContributions  Contribution[] @relation(name: "newCategoryToContribution")
}

model Document {
  id                String          @id @default(cuid())
  title             String
  description       String
  content           String?
  additional        String?
  imageUrl          String?
  pdfUrl            String?
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id])
  requirements      Requirement[]
  userId            String
  addedBy           User            @relation(fields: [userId], references: [id])

  contributions     Contribution[]
}

model Requirement {
  id                String          @id @default(cuid())
  title             String
  description       String
  updatedAt         DateTime        @updatedAt
  createdAt         DateTime        @default(now())
  
  documentId        String?
  document          Document?       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  oldContributionId String?
  oldContribution   Contribution?   @relation(name: "ContributionToOldRequirement", fields: [oldContributionId], references: [id], onDelete: Cascade)

  newContributionId String?
  newContribution   Contribution?   @relation(name: "ContributionToNewRequirement", fields: [newContributionId], references: [id], onDelete: Cascade)
}


model Contribution {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation("ContributionUser", fields: [userId], references: [id], onDelete: Cascade)
  reviewerId        String?
  reviewer          User?           @relation("ContributionReviewer", fields: [reviewerId], references: [id])

  documentId        String?
  document          Document?       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  status            String          @default("Pending") // Accepted, Rejected
  type              String          @default("NEW") // EDIT
  createdAt         DateTime        @default(now())
  verifiedAt        DateTime?       

  oldTitle          String?
  newTitle          String
  oldDescription    String?
  newDescription    String
  oldContent        String?
  newContent        String?
  oldAdditional     String?
  newAdditional     String?
  oldImageURL       String?
  newImageURL       String?
  oldPdfURL         String?
  newPdfURL         String?
  oldCategoryId     String?
  oldCategory       Category?       @relation(name: "oldCategoryToContribution", fields: [oldCategoryId], references: [id])
  newCategoryid     String?
  newCategory       Category?       @relation(name: "newCategoryToContribution", fields: [newCategoryid], references: [id])

  oldRequirements   Requirement[]   @relation(name: "ContributionToOldRequirement")
  newRequirements   Requirement[]   @relation(name: "ContributionToNewRequirement")
}

model Permission {
  id                String          @id @default(cuid())
  name              String
  authorityLevel    Int             @default(0)

  Role Role[]
}

model Badge {
  id                String          @id @default(cuid())
  name              String
  description       String          @default("")
  image             String

  users             User[]
}
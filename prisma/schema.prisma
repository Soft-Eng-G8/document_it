// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id                String    @id @default(cuid())
  name              String
  users             User[]
}

model User {
  id                String     @id @default(cuid())
  name              String     @unique
  email             String?     @unique
  hashedPassword    String
  createdAt         DateTime   @default(now())

  accountId         String
  account           Account?
  roles             Role[]       

  documents         Document[]

  Contribution      Contribution[]
}

model Account {
  id                String @id @default(cuid())
  provider          String
  providerAccountID String

  userId            String @unique
  user              User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Credential-based
  username          String?
  hashedPassword    String?

  // OAuth-based
  accessToken       String?
  refreshToken      String?
}

model Category {
  id                Int        @id @default(autoincrement())
  title             String
  description       String
  imageUrl          String?
  categories        Category[] @relation("CategoryToCategory")
  Documents         Document[]
  categoryParent    Category?  @relation("CategoryToCategory", fields: [categoryId], references: [id])
  categoryId        Int?
}

model Document {
  id                String   @id @default(cuid())
  title             String
  description       String
  content           String?
  additional        String?
  imageUrl          String?
  pdfUrl            String?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
  Category          Category @relation(fields: [categoryId], references: [id])
  categoryId        Int
  addedBy           User     @relation(fields: [userId], references: [id])
  userId            String

  Requirement       Requirement[]
  Contributions      Contribution[]
}

model Requirement{
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  status            String
  type              String
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
  
  Document          Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId        String
}


model Contribution {
  id                String @id @default(cuid())
  userid            String
  user              User @relation(fields: [userid], references: [id], onDelete: Cascade)

  documentId        String @unique
  document          Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  status            String @default("PENDING") // Accepted, Rejected
  type              String @default("saluso")


}